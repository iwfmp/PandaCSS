/* ==========================================================================
   #SHAPES
   ========================================================================== */

/**
 * Various Purely CSS Shapes that are common in web design projects.
 * Should be inside an icon object perhaps?
 */

// Mixin for keyframes
@mixin keyframes($name) {
  @keyframes #{$name} { @content; }
}

// Mixin for animations
@mixin animation($prop) {
  animation: $prop;
}





/* ==========================================================================
   #CLOSE
   ========================================================================== */

:root {
  --close-color: currentColor;
  --close-width: 2px;
  --close-wrap-size: 30px;
}


/**
 * Close Shape Wrapper Styling.
 */

.o-shape--close {
  display: inline-block;
  height: var(--close-wrap-size);
  position: relative;
  width: var(--close-wrap-size);


/**
 * Close Shape Close Styling.
 *
 * 1. I want to position the symbol using the center top,
 *    because when increasing the width and height of an object,
 *    it expands from there as well.
 *    That what makes it looks like being drawn.
 * 2. To re-position despite the transform origin, we need to do some
 *    clever math, using our old friends sin and cos.
 */

  &::before,
  &::after {
    background-color: var(--close-color);
    content: '';
    height: inherit;
    position: absolute;
    transform-origin: center top; /* [1] */
    width: var(--close-width);
    top: 0;
    left: 0;
  }

  &::before {
    transform: rotate(45deg);
    margin-left: calc(var(--close-wrap-size) * #{cos(45deg)}); /* [2] */
  }
  &::after { transform: rotate(-45deg); }


/**
 * Close Shape Animation.
 */

  @include keyframes(close-left) {
    0% { height: 0; }
    50% { height: var(--close-wrap-size); }
    100% { height: var(--close-wrap-size); }
  }
  @include keyframes(close-right) {
    0% { height: 0; }
    50% { height: 0; }
    100% { height: var(--close-wrap-size); }
  }

  &.o-shape--animated::after { @include animation(close-left .5s linear); }
  &.o-shape--animated::before { @include animation(close-right .5s linear); }
}





/* ==========================================================================
   #CHECK
   ========================================================================== */

:root {
  --check-color: #{$color-green-emerald};
  --check-width: 6px;
  --check-wrap-size: 50px;
}


/**
 * Check Shape Wrapper Styling.
 */

.o-shape--check {
  display: inline-block;
  height: var(--check-wrap-size);
  position: relative;
  vertical-align: middle;
  width: var(--check-wrap-size);


/**
 * Check Shape Check Styling.
 *
 * 1. This element has a border on the right, and top.
 *    By rotating it looks like a check symbol, but the wrong way.
 *    That's why I'm flipping it with scaleX(-1).
 * 2. I want to position the symbol using the center top,
 *    because when increasing the width and height of an object,
 *    it expands from there as well.
 *    That what makes it looks like being drawn.
 */

  &::after {
    height: var(--check-wrap-size);
    left: 0;
    position: absolute;
    top: 66.66%;
    width: calc(var(--check-wrap-size) / 2);

    border-right: var(--check-width) solid var(--check-color);
    border-top: var(--check-width) solid var(--check-color);
    content: '';
    display: block;

    transform: scaleX(-1) rotate(180deg + -45deg); /* [1] */
    transform-origin: center top; /* [2] */
  }


/**
 * Check Shape Animation.
 */

  @include keyframes(check) {
    0% {
      height: 0;
      width: 0;
    }
    25% {
      height: 0;
      width: calc(var(--check-wrap-size) / 2);
    }
    50% {
      height: var(--check-wrap-size);
      width: calc(var(--check-wrap-size) / 2);
    }
  }

  &.o-shape--animated::after { @include animation(check .3s); }
}





/* ==========================================================================
   #ARROWS
   ========================================================================== */

:root {
  --arrow-width: 2px;
}


/**
 * The arrows are rotated boxes with the appropriate borders colored.
 * dimensions are inherited using .u-img utility classes,
 * or through the css variables.
 *
 * 1. Push back the arrows to center after rotation.
 */

.o-shape--arrow {
  border: var(--arrow-width) solid transparent;
  display: block;
  height: inherit;
  position: relative;
  transform: rotate(-45deg);
  width: inherit;
}


.o-shape--arrow-r {
  border-bottom-color: currentColor;
  border-right-color: currentColor;
  right: 50%; /* [1] */
}


.o-shape--arrow-l {
  border-left-color: currentColor;
  border-top-color: currentColor;
  left: 50%; /* [1] */
}
