// ==========================================================================
// #COLORS
// ==========================================================================

// Color variable naming is a challenge. Simple 'green-yellow' or 'color-error'
// proves to be error prone and clutters the code base.
// Generic color naming, later assigned to 'roles' in colors utilities might
// be a fair enough solution.
// https://davidwalsh.name/sass-color-variables-dont-suck

$color-black:              #000000 !default;
$color-gray-mineshaft:     #252525 !default;
$color-gray-boulder:       #757575 !default;
$color-gray-hit:           #a1adb5 !default;
$color-gray-gallery:       #eaeaea !default;
$color-gray-concrete:      #f2f2f2 !default;
$color-white:              #ffffff !default;

$color-blue-dodger:        #00b4ff !default;
$color-blue-moody:         #7c88cf !default;
$color-blue-space:         #313d41 !default;
$color-green-atlantis:     #8bd738 !default;
$color-green-emerald:      #41d56a !default;
$color-green-olivine:      #9ab973 !default;
$color-orange-grenadier:   #d5460f !default;
$color-red-guardsman:      #ba0101 !default;
$color-yellow-lace:        #fdf6e3 !default;
$color-yellow-sun:         #fdcd3b !default;


$global-colors: (
  "white":      $color-white,
  "black":      $color-black,
  "light":      $color-gray-concrete,
  "dark":       $color-blue-space,

  "primary":    $color-yellow-lace,
  "secondary":  $color-green-olivine,

  "brand":      $color-blue-moody,
  "cta":        $color-green-atlantis,
  "info":       $color-blue-dodger,
  "success":    $color-green-emerald,
  "danger":     $color-orange-grenadier,
  "warning":    $color-yellow-sun,
  "error":      $color-red-guardsman
) !default;


$global-colors-text: (
  "white":     $color-white,
  "black":     $color-black,
  "light":     $color-gray-gallery,
  "dark":      $color-gray-boulder,

  "primary":   $color-gray-mineshaft,
  "secondary": $color-gray-hit
) !default;





// ==========================================================================
// #COLOR INVERT
// ==========================================================================

// Functions to find color luminence and return an inverted value.
// https://css-tricks.com/snippets/sass/luminance-color-function/

// Color Luminence
// ==========================================================================

// Returns the luminance of `$color` as a float (between 0 and 1).
// 1 is pure white, 0 is pure black.
//
// @param {Color} $color - Color
// @return {Number}
// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef Reference

$color-invert: $global-font-color !default;
$color-invert-o: $color-white !default;

@function luminance($color) {

  $color-rgb: (
    'red':   red($color),
    'green': green($color),
    'blue':  blue($color)
  );

  @each $name, $value in $color-rgb {
    $value: $value / 255;

    @if $value < .03928 {
      $value: $value / 12.92;
    }

    @else {
      $value: ($value + .055) / 1.055;
      $value: pow($value, 2.4);
    }

    $color-rgb: map-merge($color-rgb, ($name: $value));
  }

  @return (
    (map-get($color-rgb, 'red') * .2126) +
    (map-get($color-rgb, 'green') * .7152) +
    (map-get($color-rgb, 'blue') * .0722)
  );
}





// Invet Color
// ==========================================================================

// Return a color value according to the given input color luminence.

@function color-invert($color) {

  @if (luminance($color) > .55) {
    @return $color-invert;
  }

  @else {
    @return $color-invert-o;
  }

}
